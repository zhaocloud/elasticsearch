[[search]]
= Search APIs

[partintro]
--

Most search APIs are <<search-multi-index-type,multi-index&#44; multi-type>>, with the
exception of the <<search-explain>> endpoints.

[float]
[[search-routing]]
== Routing

<<<<<<< HEAD
When executing a search, it will be broadcasted to all the index/indices
=======
When executing a search, it will be broadcast to all the index/indices
>>>>>>> v2.1.1
shards (round robin between replicas). Which shards will be searched on
can be controlled by providing the `routing` parameter. For example,
when indexing tweets, the routing value can be the user name:

[source,js]
--------------------------------------------------
$ curl -XPOST 'http://localhost:9200/twitter/tweet?routing=kimchy' -d '{
    "user" : "kimchy",
    "postDate" : "2009-11-15T14:12:12",
    "message" : "trying out Elasticsearch"
}
'
--------------------------------------------------

In such a case, if we want to search only on the tweets for a specific
user, we can specify it as the routing, resulting in the search hitting
only the relevant shard:

[source,js]
--------------------------------------------------
$ curl -XGET 'http://localhost:9200/twitter/tweet/_search?routing=kimchy' -d '{
    "query": {
<<<<<<< HEAD
        "filtered" : {
            "query" : {
=======
        "bool" : {
            "must" : {
>>>>>>> v2.1.1
                "query_string" : {
                    "query" : "some query string here"
                }
            },
            "filter" : {
                "term" : { "user" : "kimchy" }
            }
        }
    }
}
'
--------------------------------------------------

The routing parameter can be multi valued represented as a comma
separated string. This will result in hitting the relevant shards where
the routing values match to.

[float]
[[stats-groups]]
== Stats Groups

A search can be associated with stats groups, which maintains a
statistics aggregation per group. It can later be retrieved using the
<<indices-stats,indices stats>> API
specifically. For example, here is a search body request that associate
the request with two different groups:

[source,js]
--------------------------------------------------
{
    "query" : {
        "match_all" : {}
    },
    "stats" : ["group1", "group2"]
}
--------------------------------------------------

--

include::search/search.asciidoc[]

include::search/uri-request.asciidoc[]

include::search/request-body.asciidoc[]

include::search/search-template.asciidoc[]

<<<<<<< HEAD
include::search/facets.asciidoc[]

include::search/aggregations.asciidoc[]
=======
include::search/search-shards.asciidoc[]
>>>>>>> v2.1.1

include::search/suggesters.asciidoc[]

include::search/multi-search.asciidoc[]

include::search/count.asciidoc[]

<<<<<<< HEAD
=======
include::search/exists.asciidoc[]

>>>>>>> v2.1.1
include::search/validate.asciidoc[]

include::search/explain.asciidoc[]

include::search/percolate.asciidoc[]

<<<<<<< HEAD
include::search/more-like-this.asciidoc[]

include::search/benchmark.asciidoc[]

=======
include::search/field-stats.asciidoc[]
>>>>>>> v2.1.1
