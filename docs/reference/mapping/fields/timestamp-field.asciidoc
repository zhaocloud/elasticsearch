[[mapping-timestamp-field]]
<<<<<<< HEAD
=== `_timestamp`

The `_timestamp` field allows to automatically index the timestamp of a
document. It can be provided externally via the index request or in the
`_source`. If it is not provided externally it will be automatically set
to the date the document was processed by the indexing chain.

[float]
==== enabled

By default it is disabled. In order to enable it, the following mapping
should be defined:

[source,js]
--------------------------------------------------
{
    "tweet" : {
        "_timestamp" : { "enabled" : true }
    }
}
--------------------------------------------------

[float]
==== store / index

By default the `_timestamp` field has `store` set to `false` and `index`
set to `not_analyzed`. It can be queried as a standard date field.

[float]
==== path

The `_timestamp` value can be provided as an external value when
indexing. But, it can also be automatically extracted from the document
to index based on a `path`. For example, having the following mapping:

[source,js]
--------------------------------------------------
{
    "tweet" : {
        "_timestamp" : {
            "enabled" : true,
            "path" : "post_date"
        }
    }
}
--------------------------------------------------

Will cause `2009-11-15T14:12:12` to be used as the timestamp value for:

[source,js]
--------------------------------------------------
{
    "message" : "You know, for Search",
    "post_date" : "2009-11-15T14:12:12"
}
--------------------------------------------------

Note, using `path` without explicit timestamp value provided require an
additional (though quite fast) parsing phase.

[float]
==== format

You can define the <<mapping-date-format,date
format>> used to parse the provided timestamp value. For example:

[source,js]
--------------------------------------------------
{
    "tweet" : {
        "_timestamp" : {
            "enabled" : true,
            "path" : "post_date",
            "format" : "YYYY-MM-dd"
        }
    }
}
--------------------------------------------------

Note, the default format is `dateOptionalTime`. The timestamp value will
first be parsed as a number and if it fails the format will be tried.
=======
=== `_timestamp` field

deprecated[2.0.0-beta2,The `_timestamp` field is deprecated.  Instead, use a normal <<date,`date`>> field and set its value explicitly]

The `_timestamp` field, when enabled, allows a timestamp to be indexed and
stored with a document. The timestamp may be specified manually, generated
automatically, or set to a default value:

[source,js]
------------------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "_timestamp": { <1>
        "enabled": true
      }
    }
  }
}

PUT my_index/my_type/1?timestamp=2015-01-01 <2>
{ "text": "Timestamp as a formatted date" }

PUT my_index/my_type/2?timestamp=1420070400000 <3>
{ "text": "Timestamp as milliseconds since the epoch" }

PUT my_index/my_type/3 <4>
{ "text": "Autogenerated timestamp set to now()" }

------------------------------------
// AUTOSENSE

<1> Enable the `_timestamp` field with default settings.
<2> Set the timestamp manually with a formatted date.
<3> Set the timestamp with milliseconds since the epoch.
<4> Auto-generates a timestamp with <<date-math,now()>>.

The behaviour of the `_timestamp` field can be configured with the following parameters:

`default`::

    A default value to be used if none is provided.  Defaults to <<date-math,now()>>.

`format`::

    The <<mapping-date-format,date format>> (or formats) to use when parsing timestamps.  Defaults to `epoch_millis||strictDateOptionalTime`.

`ignore_missing`::

    If `true` (default), replace missing timestamps with the `default` value.  If `false`, throw an exception.


The value of the `_timestamp` field is accessible in queries, aggregations, scripts,
and when sorting:

[source,js]
--------------------------
GET my_index/_search
{
  "query": {
    "range": {
      "_timestamp": { <1>
        "gte": "2015-01-01"
      }
    }
  },
  "aggs": {
    "Timestamps": {
      "terms": {
        "field": "_timestamp", <2>
        "size": 10
      }
    }
  },
  "sort": [
    {
      "_timestamp": { <3>
        "order": "desc"
      }
    }
  ],
  "script_fields": {
    "Timestamp": {
      "script": "doc['_timestamp']" <4>
    }
  }
}
--------------------------
// AUTOSENSE

<1> Querying on the `_timestamp` field
<2> Aggregating on the `_timestamp` field
<3> Sorting on the `_timestamp` field
<4> Accessing the `_timestamp` field in scripts (inline scripts must be <<enable-dynamic-scripting,enabled>> for this example to work)
>>>>>>> v2.1.1
